{"version":3,"sources":["components/Form.js","components/App.js","reducers/index.js","index.js"],"names":["FormOrder","onSubmit","formValues","data","props","dispatch","reset","axios","method","url","catch","error","window","alert","label","input","meta","FormGroup","Label","Input","bsSize","type","value","onChange","invalid","touched","FormFeedback","setStep","minimumValue","maximumValue","step","min","max","dishTypeValue","Field","name","component","this","renderInput","parse","Number","submitSucceeded","dirty","Alert","Form","handleSubmit","renderSelect","renderConditional","Row","className","Button","onClick","disabled","submitting","color","size","React","Component","reduxForm","form","validate","errors","preparation_time","diameter","no_of_slices","spiciness_scale","slices_of_bread","selector","formValueSelector","connect","state","App","Container","Col","xs","sm","md","Card","CardHeader","style","backgroundColor","height","textAlign","CardBody","combineReducers","formReducer","store","createStore","reducers","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.4c8546e5.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { Field, reduxForm, formValueSelector,reset } from 'redux-form';\nimport axios from 'axios';\nimport { Button, Form, FormGroup, Label, Input, FormFeedback, Row, Alert } from 'reactstrap';\n\n\nclass FormOrder extends React.Component {\n  renderSelect({label, input,meta }){\n    return(\n      <FormGroup>\n      <Label>{label}</Label>\n      <Input bsSize=\"lg\" type=\"select\" value={input.value} onChange={input.onChange} invalid={meta.touched && meta.invalid}>\n              <option />\n              <option value=\"pizza\">pizza</option>\n              <option value=\"soup\">soup</option>\n              <option value=\"sandwich\">sandwich</option>\n      </Input>\n      <FormFeedback>{meta.error}</FormFeedback>\n      </FormGroup>\n    )\n  }\n\n  renderInput({setStep, minimumValue, maximumValue , type, input, label, meta }){\n    return(\n      <FormGroup>\n        <Label>{label}</Label>\n        <Input bsSize=\"lg\" type={type} step={setStep} min={minimumValue} max={maximumValue} {...input} invalid={meta.touched && meta.invalid}/>\n        <FormFeedback>{meta.error}</FormFeedback>\n      </FormGroup>\n    )\n  }\n  renderConditional(dishTypeValue) {\n    switch(dishTypeValue) {\n      case 'pizza':\n        return(\n          <>\n          <Field\n            name=\"no_of_slices\"\n            label=\"Number of slices\"\n            type=\"number\"\n            minimumValue = \"0\"\n            component={this.renderInput}\n            parse={value => !value ? null : Number(value)}\n          />\n          <Field\n            name=\"diameter\"\n            label=\"Pizza diameter\"\n            type=\"number\"\n            setStep = \"0.01\"\n            minimumValue = \"0\"\n            parse={value => !value ? null : Number(value)}\n            component={this.renderInput}\n          />\n          </>\n        )\n      case 'soup':\n          return(\n            <Field\n              name=\"spiciness_scale\"\n              label=\"Spiciness scale(1-10)\"\n              type=\"number\"\n              minimumValue = \"1\"\n              maximumValue = \"10\"\n              component={this.renderInput}\n              parse={value => !value ? null : Number(value)}\n            />\n        )\n      case 'sandwich':\n          return(\n            <Field\n              name=\"slices_of_bread\"\n              label = \"Number slices of bread\"\n              type=\"number\"\n              minimumValue = \"0\"\n              component={this.renderInput}\n              parse={value => !value ? null : Number(value)}\n            />\n        )\n      default:\n      return null;\n    }\n  }\n  onSubmit = (formValues) => {\n    const data = formValues;\n    this.props.dispatch(reset('formOrder'));\n    axios({\n      method: 'post',\n      url: 'https://frosty-wood-6558.getsandbox.com:443/dishes',\n      data\n    })\n     .catch(function (error) {\n       window.alert('Unfortunately, order was not accepted ')\n     });\n    \n  }\n  render(){\n    return (\n      <>\n      {this.props.submitSucceeded && !this.props.dirty && <Alert>Your order was accepted!</Alert>}\n      <Form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n          <Field\n            name=\"name\"\n            label=\"Name\"\n            type=\"text\"\n            component={this.renderInput} \n          />\n          <Field\n            name=\"preparation_time\"\n            label=\"Preparation time\"\n            type=\"time\"\n            setStep = \"10\"\n            minimumValue = \"00:00:01\"\n            component={this.renderInput}\n          />\n          <Field\n            name=\"type\"\n            label=\"Type of dish\"\n            component={this.renderSelect}\n          />\n          {this.renderConditional(this.props.dishTypeValue)}\n          <Row className=\"justify-content-center\">        \n              <Button onClick={this.props.reset} type=\"button\" disabled={!this.props.dirty || this.props.submitting} color=\"secondary\" size=\"lg\" className=\"mx-1\">Reset</Button>\n              <Button type=\"submit\" disabled = {this.props.submitting} color=\"primary\" size=\"lg\" className=\"mx-1\">Submit</Button>          \n          </Row>     \n      </Form>\n      </>\n  )\n  }\n  \n}\n\nconst validate = (formValues) => {\n    const errors = {};\n    if(!formValues.name) {\n        errors.name = 'You must enter a name';\n    }\n    if (!formValues.preparation_time) {\n        errors.preparation_time = 'You must enter a preparation time'\n    }\n    if (!formValues.type) {\n        errors.type = 'You must enter a type of dish'\n    }\n    if (!formValues.diameter) {\n      errors.diameter = 'You must enter a pizza diameter'\n    }\n    if (!formValues.no_of_slices) {\n      errors.no_of_slices = 'You must enter a number of slices'\n    }\n    if (!formValues.spiciness_scale) {\n      errors.spiciness_scale = 'You must enter a spiciness scale'\n    }\n    if (!formValues.slices_of_bread) {\n      errors.slices_of_bread = 'You must enter a number slices of bread'\n    }\n    return errors;\n}\n\nFormOrder = reduxForm({\n  form: 'formOrder',\n  validate\n})(FormOrder)\n\nconst selector = formValueSelector('formOrder');\nconst mapStateToProps = (state) => {\n  const dishTypeValue = selector(state, 'type');\n  return { dishTypeValue }\n}\n\nexport default connect(mapStateToProps)(FormOrder)","import React from 'react';\r\nimport FormOrder from './Form';\r\nimport axios from 'axios'\r\nimport { Card, CardHeader, CardBody, Row, Col, Container } from 'reactstrap';\r\nclass App extends React.Component  {\r\n    onSubmit = (formValues) => {\r\n        \r\n        axios({\r\n            method: 'post',\r\n            url: 'https://frosty-wood-6558.getsandbox.com:443/dishes',\r\n            data: {\r\n                formValues\r\n            }\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n        <Container className=\"mt-5\">\r\n            <Row className=\"justify-content-center\">\r\n                <Col xs=\"12\" sm=\"8\" md=\"6\">\r\n                    <Card>\r\n                        <CardHeader style={{color: \"white\", backgroundColor: '#0275d8', height: \"100px\", textAlign: \"center\"}} className=\"d-flex align-items-center\"> \r\n                            <h3 className=\"mx-auto\">ORDER HANDLING FORM</h3>                       \r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <FormOrder/>\r\n                        </CardBody>   \r\n                    </Card>\r\n            </Col>\r\n            </Row>\r\n        </Container>\r\n        \r\n    )\r\n    }\r\n}\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nexport default combineReducers({\r\n    form: formReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(\n    reducers\n)\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}